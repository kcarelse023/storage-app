AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for self-storage-solution
Globals:
  Function:
    Runtime: python3.12
    MemorySize: 3008
    Timeout: 30
    Tracing: Active
Parameters:
  Env:
    Type: String
    Default: dev
  S3BucketName:
    Type: String
    Default: wtc-self-storage-cpt-2
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators
    Type: String
    Default: apiAdmins
Resources:
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Origin Access Identity
    Metadata:
      SamResourceId: CloudFrontOriginAccessIdentity
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Cloudfront distribution for the static website
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
        - Id: s3-website
          DomainName:
            Fn::GetAtt:
            - S3Bucket
            - DomainName
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
    Metadata:
      SamResourceId: CloudfrontDistribution
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${S3BucketName}
    Metadata:
      SamResourceId: S3Bucket
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: s3:GetObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${CloudFrontOriginAccessIdentity}
    Metadata:
      SamResourceId: S3BucketPolicy
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: userid
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: userid
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Metadata:
      SamResourceId: UsersTable
  OnCognitoSignupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - UsersFunction
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - UserPool
        - Arn
    Metadata:
      SamResourceId: OnCognitoSignupPermission
    #new
  UnitsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: unitId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: unitId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    #new

    #new lambda
  UnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handler for all users related operations
      CodeUri: ./src/api
      Handler: units.lambda_handler
      Environment:
        Variables:
          UNITS_TABLE:
            Ref: UnitsTable
          UNITS_TABLE_ARN:
            Fn::GetAtt:
            - UnitsTable
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UnitsTable
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}
      Events:
        GetUsersEvent:
          Type: Api
          Properties:
            Path: /units
            Method: get
            RestApiId:
              Ref: RestAPI
        PutUserEvent:
          Type: Api
          Properties:
            Path: /units
            Method: post
            RestApiId:
              Ref: RestAPI
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /units/{unitId}
            Method: put
            RestApiId:
              Ref: RestAPI
        GetUserEvent:
          Type: Api
          Properties:
            Path: /units/{unitId}
            Method: get
            RestApiId:
              Ref: RestAPI
        DeleteUserEvent:
          Type: Api
          Properties:
            Path: /units/{unitId}
            Method: delete
            RestApiId:
              Ref: RestAPI
    Metadata:
      SamResourceId: UnitsFunction
  UnitsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UnitsFunction}
    Metadata:
      SamResourceId: UnitsFunctionLogGroup


    # new lambda
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handler for all users related operations
      CodeUri: ./src/api
      Handler: users.lambda_handler
      Environment:
        Variables:
          USERS_TABLE:
            Ref: UsersTable
          USERS_TABLE_ARN:
            Fn::GetAtt:
            - UsersTable
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}
      Events:
        GetUsersEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId:
              Ref: RestAPI
        PutUserEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId:
              Ref: RestAPI
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: put
            RestApiId:
              Ref: RestAPI
        GetUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: get
            RestApiId:
              Ref: RestAPI
        DeleteUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: delete
            RestApiId:
              Ref: RestAPI
        IsAdminEvent:
          Type: Api
          Properties:
            Path: /users/{userid}/isAdmin
            Method: get
            RestApiId:
              Ref: RestAPI
    Metadata:
      SamResourceId: UsersFunction
  UsersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UsersFunction}
    Metadata:
      SamResourceId: UsersFunctionLogGroup
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Tags:
        Name:
          Fn::Sub: ${AWS::StackName}-API
        Stack:
          Fn::Sub: ${AWS::StackName}
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - AuthorizerFunction
              - Arn
            Identity:
              Headers:
              - Authorization
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - AccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol", "integrationStatus":
          $context.integrationStatus, "integrationLatency": $context.integrationLatency,
          "responseLength":"$context.responseLength" }'
      MethodSettings:
      - ResourcePath: /*
        LoggingLevel: INFO
        HttpMethod: '*'
        DataTraceEnabled: true
    Metadata:
      SamResourceId: RestAPI
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      UsernameAttributes:
      - email
      UserPoolTags:
        Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} User Pool
      LambdaConfig:
        PostConfirmation:
          Fn::GetAtt:
          - UsersFunction
          - Arn
    Metadata:
      SamResourceId: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}UserPoolClient
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - email
      - openid
      CallbackURLs:
      - http://localhost
    Metadata:
      SamResourceId: UserPoolClient
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: UserPoolClient
      UserPoolId:
        Ref: UserPool
    Metadata:
      SamResourceId: UserPoolDomain
  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName:
        Ref: UserPoolAdminGroupName
      Precedence: 0
      UserPoolId:
        Ref: UserPool
    Metadata:
      SamResourceId: ApiAdministratorsUserPoolGroup
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/api
      Handler: authorizer.lambda_handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
          APPLICATION_CLIENT_ID:
            Ref: UserPoolClient
          ADMIN_GROUP_NAME:
            Ref: UserPoolAdminGroupName
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}
    Metadata:
      SamResourceId: AuthorizerFunction
  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      SamResourceId: ApiLoggingRole
  ApiGatewayAccountLoggingSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiLoggingRole
        - Arn
    Metadata:
      SamResourceId: ApiGatewayAccountLoggingSettings
  AccessLogs:
    Type: AWS::Logs::LogGroup
    DependsOn: ApiLoggingRole
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/APIAccessLogs
    Metadata:
      SamResourceId: AccessLogs
  AlarmsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
      - Key: Stack
        Value:
          Fn::Sub: ${AWS::StackName}
    Metadata:
      SamResourceId: AlarmsTopic
  RestAPIErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ApiName
        Value:
          Ref: RestAPI
      EvaluationPeriods: 1
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Sum
      Threshold: 1.0
    Metadata:
      SamResourceId: RestAPIErrorsAlarm
  AuthorizerFunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: AuthorizerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
    Metadata:
      SamResourceId: AuthorizerFunctionErrorsAlarm
  AuthorizerFunctionThrottlingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: AuthorizerFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
    Metadata:
      SamResourceId: AuthorizerFunctionThrottlingAlarm
  UsersFunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: UsersFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
    Metadata:
      SamResourceId: UsersFunctionErrorsAlarm
  UsersFunctionThrottlingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: UsersFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
    Metadata:
      SamResourceId: UsersFunctionThrottlingAlarm
  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName:
        Fn::Sub: ${AWS::StackName}-dashboard
      DashboardBody:
        Fn::Sub: "{\n  \"widgets\": [\n      {\n          \"height\": 6,\n       \
          \   \"width\": 6,\n          \"y\": 6,\n          \"x\": 0,\n          \"\
          type\": \"metric\",\n          \"properties\": {\n              \"metrics\"\
          : [\n                  [ \"AWS/Lambda\", \"Invocations\", \"FunctionName\"\
          , \"${UsersFunction}\" ],\n                  [ \".\", \"Errors\", \".\"\
          , \".\" ],\n                  [ \".\", \"Throttles\", \".\", \".\" ],\n\
          \                  [ \".\", \"Duration\", \".\", \".\", { \"stat\": \"Average\"\
          \ } ],\n                  [ \".\", \"ConcurrentExecutions\", \".\", \".\"\
          , { \"stat\": \"Maximum\" } ]\n              ],\n              \"view\"\
          : \"timeSeries\",\n              \"region\": \"${AWS::Region}\",\n     \
          \         \"stacked\": false,\n              \"title\": \"Users Lambda\"\
          ,\n              \"period\": 60,\n              \"stat\": \"Sum\"\n    \
          \      }\n      },\n      {\n          \"height\": 6,\n          \"width\"\
          : 6,\n          \"y\": 6,\n          \"x\": 6,\n          \"type\": \"metric\"\
          ,\n          \"properties\": {\n              \"metrics\": [\n         \
          \         [ \"AWS/Lambda\", \"Invocations\", \"FunctionName\", \"${AuthorizerFunction}\"\
          \ ],\n                  [ \".\", \"Errors\", \".\", \".\" ],\n         \
          \         [ \".\", \"Throttles\", \".\", \".\" ],\n                  [ \"\
          .\", \"Duration\", \".\", \".\", { \"stat\": \"Average\" } ],\n        \
          \          [ \".\", \"ConcurrentExecutions\", \".\", \".\", { \"stat\":\
          \ \"Maximum\" } ]\n              ],\n              \"view\": \"timeSeries\"\
          ,\n              \"region\": \"${AWS::Region}\",\n              \"stacked\"\
          : false,\n              \"title\": \"Authorizer Lambda\",\n            \
          \  \"period\": 60,\n              \"stat\": \"Sum\"\n          }\n     \
          \ },\n      {\n          \"height\": 6,\n          \"width\": 12,\n    \
          \      \"y\": 0,\n          \"x\": 0,\n          \"type\": \"metric\",\n\
          \          \"properties\": {\n              \"metrics\": [\n           \
          \       [ \"AWS/ApiGateway\", \"4XXError\", \"ApiName\", \"${AWS::StackName}\"\
          , { \"yAxis\": \"right\" } ],\n                  [ \".\", \"5XXError\",\
          \ \".\", \".\", { \"yAxis\": \"right\" } ],\n                  [ \".\",\
          \ \"DataProcessed\", \".\", \".\", { \"yAxis\": \"left\" } ],\n        \
          \          [ \".\", \"Count\", \".\", \".\", { \"label\": \"Count\", \"\
          yAxis\": \"right\" } ],\n                  [ \".\", \"IntegrationLatency\"\
          , \".\", \".\", { \"stat\": \"Average\" } ],\n                  [ \".\"\
          , \"Latency\", \".\", \".\", { \"stat\": \"Average\" } ]\n             \
          \ ],\n              \"view\": \"timeSeries\",\n              \"stacked\"\
          : false,\n              \"region\": \"${AWS::Region}\",\n              \"\
          period\": 60,\n              \"stat\": \"Sum\",\n              \"title\"\
          : \"API Gateway\"\n          }\n      }\n  ]\n}\n"
    Metadata:
      SamResourceId: ApplicationDashboard
Outputs:
  UsersTable:
    Description: DynamoDB Users table
    Value:
      Ref: UsersTable
  UsersFunction:
    Description: Lambda function used to perform actions on the users data
    Value:
      Ref: UsersFunction
  UnitsTable:
    Description: DynamoDB Users table
    Value:
      Ref: UnitsTable
  UnitsFunction:
    Description: Lambda function used to perform actions on the users data
    Value:
      Ref: UnitsFunction
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod
  UserPool:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value:
      Ref: UserPoolClient
  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value:
      Ref: UserPoolAdminGroupName
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value:
      Fn::Sub: https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost
  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value:
      Fn::Sub: aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id
        ${UserPoolClient} --auth-parameters USERNAME=<user@example.com>,PASSWORD=<password>
        --query "AuthenticationResult.IdToken" --output text
  AlarmsTopic:
    Description: SNS Topic to be used for the alarms subscriptions
    Value:
      Ref: AlarmsTopic
  DashboardURL:
    Description: Dashboard URL
    Value:
      Fn::Sub: https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ApplicationDashboard}


#aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id 2n8dvhls8rqpo6gvjn61md94fh --auth-parameters USERNAME=gbengalawal99@gmail.com,PASSWORD=@Wc12345 --query "AuthenticationResult.IdToken" --output text
